using System;
using System.Collections.Generic;
using System.Linq;
using Foundation.Lighthouse.Model;
using Foundation.Lighthouse.Model.Autogenerated;
using Foundation.Lighthouse.Model.Autogenerated.Concrete.Foundation.Lighthouse.Concrete;
using Foundation.Lighthouse.Model.Autogenerated.Concrete.Foundation.Lighthouse.Partial;
using Foundation.Lighthouse.Model.Autogenerated.Foundation.Lighthouse.Concrete;
using Foundation.Lighthouse.Models;
using Newtonsoft.Json;
using Sitecore.Data.Items;
using Sitecore.Data.Managers;
using Synthesis;

namespace Foundation.Lighthouse
{
    public class SitecoreData : ISitecoreData
    {
        public bool AddCheckPoint(Item item, LighthouseJson data)
        {
            var checkpoint = ConverLighthouseJsonToCheckPoint(data);
            return AddCheckPoint(item, checkpoint);
        }

        public bool AddCheckPoint(Item item, Checkpoint checkpoint)
        {
            var itemTemplate = TemplateManager.GetTemplate(item);
            if (itemTemplate.GetBaseTemplates().Any(x => x.ID == Constants.LighthouseTemplate))
            {
                var lighthouseItem = new _Lighthouse(item);
                lighthouseItem.Editing.BeginEdit();
                lighthouseItem.Accessibility.RawValue = checkpoint.Accessibility.ToString();
                lighthouseItem.BestPractices.RawValue = checkpoint.BestPractices.ToString();
                lighthouseItem.Perfomance.RawValue = checkpoint.Performance.ToString();
                lighthouseItem.SEO.RawValue = checkpoint.SEO.ToString();
                lighthouseItem.Data.RawValue = AddDataCheckpoint(lighthouseItem.Data.RawValue, checkpoint);
                lighthouseItem.Editing.EndEdit();
            }
            else
            {
                Sitecore.Diagnostics.Log.Error($"Lighthouse: could not save data, item is not inherited from _Lighthouse template {Constants.LighthouseTemplate}", this);
            }

            return false;
        }

        public ILighthouseSiteItem GetOrCreateLighouseSiteItem(string name)
        {
            var sitesRoot = Sitecore.Data.Database.GetDatabase("master").GetItem(Settings.ItemsSitesPath);
            //create site item if doesn't exists
            var site = sitesRoot.GetChildren().FirstOrDefault(x => x.Name == name && x.Template.ID == LighthouseSite.ItemTemplateId);
            if (site == null)
            {
                var root = sitesRoot.As<IStandardTemplateItem>();
                var siteItem = root.Add<ILighthouseSiteItem>(name);
                siteItem.Editing.BeginEdit();
                siteItem.Sitename.RawValue = name;
                siteItem.Editing.EndEdit();
                return siteItem;
            }
            else
            {
                return site.As<ILighthouseSiteItem>();
            }
        }

        public void UpdateSiteItemInfo(ILighthouseSiteItem siteItem, SiteSummary siteSummary)
        {
            siteItem.Editing.BeginEdit();
            siteItem.WorstItems.RawValue = siteSummary.WorstItems;
            siteItem.BestItems.RawValue = siteSummary.BestItems;
            siteItem.Logs.RawValue = siteSummary.Logs;
            siteItem.Editing.EndEdit();
        }

        private string AddDataCheckpoint(string input, Checkpoint checkpoint)
        {
            var checkpoints = string.IsNullOrEmpty(input)
                ? new List<Checkpoint>()
                : JsonConvert.DeserializeObject<List<Checkpoint>>(input);
            checkpoints.Add(checkpoint);
            return JsonConvert.SerializeObject(checkpoints, Formatting.Indented);
        }

        private Checkpoint ConverLighthouseJsonToCheckPoint(LighthouseJson data)
        {
            var newCheckpoint = new Checkpoint()
            {
                DateTime = DateTime.Now,
                Accessibility = data.Categories.Accessibility.Score.Value,
                BestPractices = data.Categories.BestPractices.Score.Value,
                Performance = data.Categories.Performance.Score.Value,
                SEO = data.Categories.Seo.Score.Value
            };
            return newCheckpoint;
        }
    }
}