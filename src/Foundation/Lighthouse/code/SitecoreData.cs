using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using DocumentFormat.OpenXml.Office2010.ExcelAc;
using Foundation.Lighthouse.Model;
using Foundation.Lighthouse.Model.Autogenerated;
using Foundation.Lighthouse.Model.Autogenerated.Concrete.Foundation.Lighthouse;
using Foundation.Lighthouse.Model.Autogenerated.Foundation.Lighthouse;
using Newtonsoft.Json;
using Sitecore.Data.Items;
using Synthesis;

namespace Foundation.Lighthouse
{
    public class SitecoreData
    {
        public bool AddCheckPoint(Item item, LighthouseJson data)
        {
            if (item.Template.BaseTemplates.Any(x => x.ID == Constants.LighthouseTemplate))
            {
                var lighthouseItem = new _Lighthouse(item);
                lighthouseItem.Editing.BeginEdit();
                lighthouseItem.Accessibility.RawValue = data.Categories.Accessibility.Score.ToString();
                lighthouseItem.BestPractices.RawValue = data.Categories.BestPractices.Score.ToString();
                lighthouseItem.Perfomance.RawValue = data.Categories.Performance.Score.ToString();
                lighthouseItem.SEO.RawValue = data.Categories.Seo.Score.ToString();
                lighthouseItem.Data.RawValue = AddDataCheckpoint(lighthouseItem.Data.RawValue, data);
                lighthouseItem.Editing.EndEdit();
            }
            else
            {
                Sitecore.Diagnostics.Log.Error($"Lighthouse: could not save data, item is not inherited from _Lighthouse template {Constants.LighthouseTemplate}",this);
            }

            return false;
        }

        private string AddDataCheckpoint(string input, LighthouseJson data)
        {
            var checkpoints = string.IsNullOrEmpty(input)
                ? new List<Checkpoint>()
                : JsonConvert.DeserializeObject<List<Checkpoint>>(input);
            var newCheckpoint = new Checkpoint()
            {
                DateTime = DateTime.Now,
                Accessibility = data.Categories.Accessibility.Score.Value,
                BestPractices = data.Categories.BestPractices.Score,
                Perfomance = data.Categories.Performance.Score,
                SEO = data.Categories.Seo.Score.Value
            };
            checkpoints.Add(newCheckpoint);
            return JsonConvert.SerializeObject(checkpoints, Formatting.Indented);
        }
    }
}