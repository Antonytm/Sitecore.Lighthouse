using System;
using System.Collections.Concurrent;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using Foundation.Lighthouse.Model;
using Foundation.Lighthouse.Model.Autogenerated;
using Foundation.Lighthouse.Models;
using Newtonsoft.Json;
using Sitecore.Data.Items;
using Sitecore.Web;

namespace Foundation.Lighthouse
{
    public class LighthouseRunner : ILighthouseRunner
    {
        private readonly IPaths _paths;
        private readonly IUrls _urls;
        private readonly ISitecoreData _sitecoreData;
        private readonly IItemsProvider _itemsProvider;
        public LighthouseRunner(IPaths paths, IUrls urls, ISitecoreData sitecoreData, IItemsProvider itemsProvider)
        {
            _paths = paths;
            _urls = urls;
            _sitecoreData = sitecoreData;
            _itemsProvider = itemsProvider;
        }
        public bool Run(Item item, OutputFormat format, SiteInfo siteInfo, out LighthouseJson lighthouseJson)
        {
            lighthouseJson = null;
            var processOutput = new ConcurrentBag<string>();
            _paths.CreateReportDir(item);

            var process = new System.Diagnostics.Process();
            var startInfo = new System.Diagnostics.ProcessStartInfo();
            startInfo.WindowStyle = System.Diagnostics.ProcessWindowStyle.Hidden;
            startInfo.FileName = _paths.GetLighthouseCmdPath();
            startInfo.Arguments += $"{_urls.GetItemUrl(item, siteInfo)}";
            var path = "";
            switch (format)
            {
                case OutputFormat.Html:
                    path = _paths.GetReportHtmlPath(item);
                    break;
                case OutputFormat.Json:
                    path = _paths.GetReportJsonPath(item);
                    startInfo.Arguments += GetOutputFormat(format);
                    break;
            }

            startInfo.Arguments += GetOutputPath(path);
            startInfo.Arguments += " --chrome-flags=\"--ignore-certificate-errors\"";

            startInfo.UseShellExecute = false;
            startInfo.RedirectStandardOutput = true;
            startInfo.RedirectStandardError = true;
            process.StartInfo = startInfo;
            process.OutputDataReceived += (sender, eventArgs) => processOutput.Add(eventArgs.Data);
            process.ErrorDataReceived += (sender, eventArgs) => processOutput.Add(eventArgs.Data);

            Sitecore.Diagnostics.Log.Error(startInfo.FileName, this);
            Sitecore.Diagnostics.Log.Error(startInfo.Arguments, this);
            process.Start();
            process.BeginOutputReadLine();
            process.BeginErrorReadLine();
            process.WaitForExit(Settings.ProcessTimeout);
            if (process.HasExited)
            {
                if (format == OutputFormat.Json)
                {
                    var json = File.ReadAllText(path);
                    var model = JsonConvert.DeserializeObject<LighthouseJson>(json);
                    _sitecoreData.AddCheckPoint(item, model);
                    lighthouseJson = model;
                }
                return true;
            }
            return false;
        }

        public void RunAll()
        {
            var siteInfoList = Sitecore.Configuration.Factory.GetSiteInfoList();

            var sitesToExclude = new List<string> { "shell", "service", "login", "admin", "modules_shell", "modules_website", "scheduler", "system", "publisher", "exm" };

            foreach (SiteInfo siteInfo in siteInfoList)
            {
                if (!sitesToExclude.Contains(siteInfo.Name))
                {
                    var site = _sitecoreData.GetOrCreateLighouseSiteItem(siteInfo.Name);
                    var count = 0;
                    var checkPoint = new Checkpoint();
                    var itemsDictionary = new Dictionary<string, double>();
                    var exceptions = new StringBuilder();

                    foreach (var item in _itemsProvider.GetAllItemsWithPresentationFilteredByTemplate(siteInfo,
                        Constants.LighthouseTemplate, null))
                    {
                        try
                        {
                            Run(item, OutputFormat.Html, siteInfo, out LighthouseJson nullLighthouseJson);
                            Run(item, OutputFormat.Json, siteInfo, out LighthouseJson lighthouseJson);
                            itemsDictionary.Add(item.Paths.FullPath, lighthouseJson.Categories.Performance.Score.Value);

                            count++;
                            checkPoint.Accessibility += lighthouseJson.Categories.Accessibility.Score.Value;
                            checkPoint.BestPractices += lighthouseJson.Categories.BestPractices.Score.Value;
                            checkPoint.Performance += lighthouseJson.Categories.Performance.Score.Value;
                            checkPoint.SEO += lighthouseJson.Categories.Seo.Score.Value;
                        }
                        catch(Exception ex)
                        {
                            exceptions.AppendLine($"{item.Paths.FullPath}: {ex.Message}");
                        }
                    }

                    if (count > 0)
                    {
                        checkPoint.Accessibility /= count;
                        checkPoint.BestPractices /= count;
                        checkPoint.Performance /= count;
                        checkPoint.SEO /= count;
                    }

                    checkPoint.DateTime = DateTime.Now;
                    var bestItems = itemsDictionary.OrderByDescending(x => x.Value).Take(10).Select(y=>y.Key);
                    var worstItems = itemsDictionary.OrderBy(x => x.Value).Take(10).Select(y => y.Key);
                    var logs = exceptions.ToString();

                    var siteSummary = new SiteSummary()
                    {
                        WorstItems = string.Join("\r\n", worstItems),
                        BestItems = string.Join("\r\n", bestItems),
                        Logs = logs
                    };

                    _sitecoreData.AddCheckPoint(site.InnerItem, checkPoint);
                    _sitecoreData.UpdateSiteItemInfo(site, siteSummary);
                }
            }
        }

        private string GetOutputPath(string path)
        {
            return $" --output-path \"{path}\"";
        }

        private string GetOutputFormat(OutputFormat format)
        {
            return $" --output {Enum.GetName(typeof(OutputFormat), format)?.ToLower()}";
        }
    }
}