using System;
using System.Web.Mvc;
using Foundation.Lighthouse.Model.Autogenerated.Concrete.Foundation.Lighthouse;
using Foundation.Lighthouse.Models;

namespace Foundation.Lighthouse.Controllers
{
    public class LighthouseController : Controller
    {
        private readonly Files _files;
        public LighthouseController()
        {
            _files = new Files();
        }
        public ActionResult ShowFileContent(string filename, string itemId, string database)
        {
            try
            {
                var item = Sitecore.Data.Database.GetDatabase(database).GetItem(itemId);
                var latestReport = _files.GetLatestHtmlReportFile(item);
                var filepath = latestReport.FullName;
                return new ContentResult() {Content = System.IO.File.ReadAllText(filepath)};
            }
            catch (Exception ex)
            {
                Sitecore.Diagnostics.Log.Error($"Lighthouse: was not able find file:'{filename}', itemId:{itemId}, database:{database}",ex, this);
                return new ContentResult(){Content = "Sorry, exception happened. Please check Sitecore logs."};
            }
        }

        public ActionResult Chart(string itemId, string database)
        {
            try
            {
                var item = Sitecore.Data.Database.GetDatabase(database).GetItem(itemId);
                var lighthouseItem = new _Lighthouse(item);
                var chart = new Chart {Json = lighthouseItem.Data.RawValue};
                return View("~/Views/Lighthouse/Chart.cshtml", chart);
            }
            catch (Exception ex)
            {
                Sitecore.Diagnostics.Log.Error($"Lighthouse: was not able render chart', itemId:{itemId}, database:{database}", ex, this);
                return new ContentResult() { Content = "Sorry, exception happened. Please check Sitecore logs." };
            }
        }
    }
}